name: Test Docker Hub Image

on:
  push:
    branches:
      - master  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - master  # Trigger on pull requests to the main branch

jobs:
  test-docker-image:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Check out the repository (optional if you only need the Docker image)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        id: docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Pull the Docker image from Docker Hub
      - name: Pull Docker image
        run: docker pull adithyamd2397/project1:tagname

      # Step 4: Define multiple task descriptions
      - name: Set task descriptions
        id: tasks
        run: |
          echo "TASK_DESCRIPTIONS=(
            'The file /data/dates.txt contains a list of dates, each on a new line. Your task is to count the number of Wednesdays in the list and write only the count (as a number) to a new file named /data/dates-wednesdays.txt.'
            'The file /data/numbers.txt contains a list of numbers, each on a new line. Your task is to calculate the sum of all numbers and write the result to a new file named /data/numbers-sum.txt.'
            'The file /data/names.txt contains a list of names, each on a new line. Your task is to sort the names alphabetically and write the sorted list to a new file named /data/names-sorted.txt.'
          )" >> $GITHUB_ENV

      # Step 5: Loop through each task description and run the Docker container
      - name: Run Docker container for each task
        run: |
          for TASK_DESCRIPTION in "${TASK_DESCRIPTIONS[@]}"; do
            echo "Running task: $TASK_DESCRIPTION"

            # Run the Docker container with the current task description
            docker run -d --name my-container -p 5000:5000 -e TASK_DESCRIPTION="$TASK_DESCRIPTION" adithyamd2397/project1:tagname
            sleep 10  # Wait for the container to start

            # Test the running container
            echo "Testing container..."
            docker ps

            # View logs (optional)
            docker logs my-container

            # Send a POST request to the Flask server and capture the output
            echo "Sending POST request to Flask server..."
            RESPONSE=$(curl -X POST -H "Content-Type: application/json" -d "{\"task\": \"$TASK_DESCRIPTION\"}" http://localhost:5000/run)
            echo "Response from server:"
            echo "$RESPONSE"

            # Optionally, print the HTTP status code
            HTTP_STATUS=$(curl -X POST -H "Content-Type: application/json" -d "{\"task\": \"$TASK_DESCRIPTION\"}" -o /dev/null -w "%{http_code}" http://localhost:5000/run)
            echo "HTTP Status Code: $HTTP_STATUS"

            # Stop and remove the container
            echo "Stopping and removing container..."
            docker stop my-container
            docker rm my-container
          done