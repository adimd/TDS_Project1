name: Test Docker Hub Image

on:
  push:
    branches:
      - master  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - master  # Trigger on pull requests to the main branch

jobs:
  test-docker-image:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Check out the repository (optional if you only need the Docker image)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        id: docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Pull the Docker image from Docker Hub
      - name: Pull Docker image
        run: docker pull adithyamd2397/project1:tagname

      # Step 4: Define the task description
      - name: Set task description
        id: task
        run: |
          echo "TASK_DESCRIPTION=The file /data/dates.txt contains a list of dates, each on a new line. Your task is to count the number of Wednesdays in the list and write only the count (as a number) to a new file named /data/dates-wednesdays.txt." >> $GITHUB_ENV

      # Step 5: Run the Docker container with the task description
      - name: Run Docker container
        run: |
          docker run -d --name my-container -p 5000:5000 -e TASK_DESCRIPTION="${{ env.TASK_DESCRIPTION }}" adithyamd2397/project1:tagname
          sleep 10  # Wait for the container to start

 # Step 6: Test the running container
      - name: Test container
        run: |
          # Check if the container is running
          docker ps

          # View logs (optional)
          docker logs my-container

          # Send a request to the Flask server and capture the output
          echo "Sending request to Flask server..."
          RESPONSE=$(curl -G -v http://localhost:5000/run --data-urlencode "task=${{ env.TASK_DESCRIPTION }}")
          echo "Response from server:"
          echo "$RESPONSE"

          # Optionally, print the HTTP status code
          HTTP_STATUS=$(curl -G -o /dev/null -w "%{http_code}" http://localhost:5000/run --data-urlencode "task=${{ env.TASK_DESCRIPTION }}")
          echo "HTTP Status Code: $HTTP_STATUS"

      # Step 7: Clean up
      - name: Stop and remove container
        run: |
          docker stop my-container
          docker rm my-container