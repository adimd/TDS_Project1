name: Test Docker Hub Image

on:
  push:
    branches:
      - master  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - master  # Trigger on pull requests to the main branch

jobs:
  test-docker-image:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Check out the repository (optional if you only need the Docker image)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        id: docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Pull the Docker image from Docker Hub
      - name: Pull Docker image
        run: docker pull adithyamd2397/project1:tagname

      # Step 4: Create a Docker volume for data persistence
      - name: Create Docker volume
        run: docker volume create my-data-volume

      # Step 5: Define the first task description
      - name: Set first task description
        id: task1
        run: |
          echo "TASK_DESCRIPTION=I need to download a dataset from https://raw.githubusercontent.com/sanand0/tools-in-data-science-public/tds-2025-01/project-1/datagen.py use 25ds1000093@ds.study.iitm.ac.in." >> $GITHUB_ENV

      # Step 6: Run the Docker container with the first task description
      - name: Run Docker container for first task
        run: |
          docker run -d --name my-container -p 5000:5000 -e TASK_DESCRIPTION="${{ env.TASK_DESCRIPTION }}" -v my-data-volume:/data adithyamd2397/project1:tagname
          sleep 10  # Wait for the container to start

      # Step 7: Test the running container for the first task
      - name: Test container for first task
        run: |
          # Check if the container is running
          docker ps

          # View logs (optional)
          docker logs my-container

          # Send a POST request to the Flask server and capture the output
          echo "Sending POST request to Flask server..."
          RESPONSE=$(curl -X POST -H "Content-Type: application/json" -d "{\"task\": \"${{ env.TASK_DESCRIPTION }}\"}" http://localhost:5000/run)
          echo "Response from server:"
          echo "$RESPONSE"

          # Optionally, print the HTTP status code
          HTTP_STATUS=$(curl -X POST -H "Content-Type: application/json" -d "{\"task\": \"${{ env.TASK_DESCRIPTION }}\"}" -o /dev/null -w "%{http_code}" http://localhost:5000/run)
          echo "HTTP Status Code: $HTTP_STATUS"

      # Step 8: Stop and remove the first container
      - name: Stop and remove first container
        run: |
          docker stop my-container
          docker rm my-container

      # Step 9: Define the second task description
      - name: Set second task description
        id: task2
        run: |
          echo "TASK_DESCRIPTION=Find all Markdown (.md) files in /data/docs/. For each file, extract the first occurrance of each H1 (i.e. a line starting with # ). Create an index file /data/docs/index.json that maps each filename" >> $GITHUB_ENV

      # Step 10: Run the Docker container with the second task description
      - name: Run Docker container for second task
        run: |
          docker run -d --name my-container -p 5000:5000 -e TASK_DESCRIPTION="${{ env.TASK_DESCRIPTION }}" -v my-data-volume:/data adithyamd2397/project1:tagname
          sleep 10  # Wait for the container to start

      # Step 11: Test the running container for the second task
      - name: Test container for second task
        run: |
          # Check if the container is running
          docker ps

          # View logs (optional)
          docker logs my-container

          # Send a POST request to the Flask server and capture the output
          echo "Sending POST request to Flask server..."
          RESPONSE=$(curl -X POST -H "Content-Type: application/json" -d "{\"task\": \"${{ env.TASK_DESCRIPTION }}\"}" http://localhost:5000/run)
          echo "Response from server:"
          echo "$RESPONSE"

          # Optionally, print the HTTP status code
          HTTP_STATUS=$(curl -X POST -H "Content-Type: application/json" -d "{\"task\": \"${{ env.TASK_DESCRIPTION }}\"}" -o /dev/null -w "%{http_code}" http://localhost:5000/run)
          echo "HTTP Status Code: $HTTP_STATUS"

      # Step 12: Stop and remove the second container
      - name: Stop and remove second container
        run: |
          docker stop my-container
          docker rm my-container

      # Step 13: Clean up Docker volume
      - name: Remove Docker volume
        run: docker volume rm my-data-volume